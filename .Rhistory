# Change the number value categories to the actual names of the outcomes.
category_mapping <- c('2' = "Roster", '3' = "Rotation", '4' = "Starter", '5' = "Allstar", '6' = "Elite")
all_data <- all_data %>%
mutate(outcome = case_when(
outcome %in% names(category_mapping) ~ category_mapping[as.character(outcome)],
TRUE ~ as.character(outcome)))
train_data = all_data %>%
filter(draftyear <= 2015)
test_data = all_data %>%
filter(draftyear >= 2018 && draftyear <= 2021)
options(scipen = 100, digits = 4)
# Fit a multinomial logistic regression model
model <- multinom(outcome ~ PPG + mins + tot_reb + ast + VORP, data = train_data)
# Summarize the model
summary(model)
# Create a new data frame with predictor variables
new_data <- data.frame(PPG = test_data$PPG, mins = test_data$mins, test_data$tot_reb, test_data$ast, test_data$VORP)
# Assuming you have a new data frame 'new_data' for prediction
predicted_probs <- data.frame(player = test_data$player,
season = test_data$season, round(predict(model, newdata = test_data, type = "probs"), digits = 8))
pred_players = c("Shai Gilgeous-Alexander", "Zion Williamson", "James Wiseman", "Josh Giddey")
career_outcome_probs = predicted_probs %>%
filter(player %in% pred_players) %>%
group_by(player) %>%
mutate(num_seasons = n()) %>%
summarize(Elite = sum(Elite) / num_seasons,
Allstar = sum(Allstar) / num_seasons,
Starter = sum(Starter) / num_seasons,
Rotation = sum(Rotation) / num_seasons,
Roster = sum(Roster) / num_seasons) %>%
distinct(player, .keep_all = TRUE) %>%
pivot_longer(cols = all_of(out_names), names_to = "Category", values_to = "Probability")
ggplot(career_outcome_probs, aes(x = Category, y = Probability, fill = Category))+
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~player) +
theme_minimal() +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
plot.title = element_text(hjust = 0.5)) +
ggtitle("Career Outcome Probability")
library(ggplot2)
library(nnet)
# Change the number value categories to the actual names of the outcomes.
category_mapping <- c('2' = "Roster", '3' = "Rotation", '4' = "Starter", '5' = "Allstar", '6' = "Elite")
all_data <- all_data %>%
mutate(outcome = case_when(
outcome %in% names(category_mapping) ~ category_mapping[as.character(outcome)],
TRUE ~ as.character(outcome)))
train_data = all_data %>%
filter(draftyear <= 2015)
test_data = all_data %>%
filter(draftyear >= 2018 && draftyear <= 2021)
options(scipen = 100, digits = 4)
# Fit a multinomial logistic regression model
model <- multinom(outcome ~ PPG + mins + VORP, data = train_data)
# Summarize the model
summary(model)
# Create a new data frame with predictor variables
new_data <- data.frame(PPG = test_data$PPG, mins = test_data$mins, test_data$VORP)
# Assuming you have a new data frame 'new_data' for prediction
predicted_probs <- data.frame(player = test_data$player,
season = test_data$season, round(predict(model, newdata = test_data, type = "probs"), digits = 8))
pred_players = c("Shai Gilgeous-Alexander", "Zion Williamson", "James Wiseman", "Josh Giddey")
career_outcome_probs = predicted_probs %>%
filter(player %in% pred_players) %>%
group_by(player) %>%
mutate(num_seasons = n()) %>%
summarize(Elite = sum(Elite) / num_seasons,
Allstar = sum(Allstar) / num_seasons,
Starter = sum(Starter) / num_seasons,
Rotation = sum(Rotation) / num_seasons,
Roster = sum(Roster) / num_seasons) %>%
distinct(player, .keep_all = TRUE) %>%
pivot_longer(cols = all_of(out_names), names_to = "Category", values_to = "Probability")
ggplot(career_outcome_probs, aes(x = Category, y = Probability, fill = Category))+
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~player) +
theme_minimal() +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
plot.title = element_text(hjust = 0.5)) +
ggtitle("Career Outcome Probability")
library(ggplot2)
library(nnet)
# Change the number value categories to the actual names of the outcomes.
category_mapping <- c('2' = "Roster", '3' = "Rotation", '4' = "Starter", '5' = "Allstar", '6' = "Elite")
all_data <- all_data %>%
mutate(outcome = case_when(
outcome %in% names(category_mapping) ~ category_mapping[as.character(outcome)],
TRUE ~ as.character(outcome)))
train_data = all_data %>%
filter(draftyear <= 2015)
test_data = all_data %>%
filter(draftyear >= 2018 && draftyear <= 2021)
options(scipen = 100, digits = 4)
# Fit a multinomial logistic regression model
model <- multinom(outcome ~ PPG + mins + tot_reb + ast + VORP, data = train_data)
# Summarize the model
summary(model)
# Create a new data frame with predictor variables
new_data <- data.frame(PPG = test_data$PPG, mins = test_data$mins, test_data$tot_reb, test_data$ast, test_data$VORP)
# Assuming you have a new data frame 'new_data' for prediction
predicted_probs <- data.frame(player = test_data$player,
season = test_data$season, round(predict(model, newdata = test_data, type = "probs"), digits = 8))
pred_players = c("Shai Gilgeous-Alexander", "Zion Williamson", "James Wiseman", "Josh Giddey")
career_outcome_probs = predicted_probs %>%
filter(player %in% pred_players) %>%
group_by(player) %>%
mutate(num_seasons = n()) %>%
summarize(Elite = sum(Elite) / num_seasons,
Allstar = sum(Allstar) / num_seasons,
Starter = sum(Starter) / num_seasons,
Rotation = sum(Rotation) / num_seasons,
Roster = sum(Roster) / num_seasons) %>%
distinct(player, .keep_all = TRUE) %>%
pivot_longer(cols = all_of(out_names), names_to = "Category", values_to = "Probability")
ggplot(career_outcome_probs, aes(x = Category, y = Probability, fill = Category))+
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~player) +
theme_minimal() +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
plot.title = element_text(hjust = 0.5)) +
ggtitle("Career Outcome Probability")
library(ggplot2)
library(nnet)
# Change the number value categories to the actual names of the outcomes.
category_mapping <- c('2' = "Roster", '3' = "Rotation", '4' = "Starter", '5' = "Allstar", '6' = "Elite")
all_data <- all_data %>%
mutate(outcome = case_when(
outcome %in% names(category_mapping) ~ category_mapping[as.character(outcome)],
TRUE ~ as.character(outcome)))
train_data = all_data %>%
filter(draftyear <= 2015)
test_data = all_data %>%
filter(draftyear >= 2018 && draftyear <= 2021)
options(scipen = 100, digits = 4)
# Fit a multinomial logistic regression model
model <- multinom(outcome ~ PPG + mins + VORP, data = train_data)
# Summarize the model
summary(model)
# Create a new data frame with predictor variables
new_data <- data.frame(PPG = test_data$PPG, mins = test_data$mins, test_data$VORP)
# Assuming you have a new data frame 'new_data' for prediction
predicted_probs <- data.frame(player = test_data$player,
season = test_data$season, round(predict(model, newdata = test_data, type = "probs"), digits = 8))
pred_players = c("Shai Gilgeous-Alexander", "Zion Williamson", "James Wiseman", "Josh Giddey")
career_outcome_probs = predicted_probs %>%
filter(player %in% pred_players) %>%
group_by(player) %>%
mutate(num_seasons = n()) %>%
summarize(Elite = sum(Elite) / num_seasons,
Allstar = sum(Allstar) / num_seasons,
Starter = sum(Starter) / num_seasons,
Rotation = sum(Rotation) / num_seasons,
Roster = sum(Roster) / num_seasons) %>%
distinct(player, .keep_all = TRUE) %>%
pivot_longer(cols = all_of(out_names), names_to = "Category", values_to = "Probability")
ggplot(career_outcome_probs, aes(x = Category, y = Probability, fill = Category))+
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~player) +
theme_minimal() +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),
plot.title = element_text(hjust = 0.5)) +
ggtitle("Career Outcome Probability")
View(career_outcome_probs)
View(rebounding_data)
OKC_reb = rebounding_data %>%
filter(team = "OKC")
OKC_reb = rebounding_data %>%
filter(team == "OKC")
View(OKC_reb)
OKC_reb = rebounding_data %>%
filter(team == "OKC") %>%
mutate(average_off_reb = sum(offensive_rebounds) / sum(off_rebound_chances))
predicted_game = 81
predicted_game = 81
OKC_reb = rebounding_data %>%
filter(team == "OKC", game_number < predicted_game)
OKC_reb = rebounding_data %>%
filter(team == "OKC", game_number < predicted_game) %>%
summarise(average_off_reb = sum(offensive_rebounds) / sum(off_rebound_chances))
View(predicted_probs)
bonus_set = all_data %>%
filter(draftyear >= 2019 && draftyear <= 2021)
# Create a new data frame with predictor variables
new_data = data.frame(PPG = bonus_set$PPG, mins = bonus_set$mins, bonus_set$VORP)
# predict the probaility of each category for the test dataset with the model
predicted_probs = data.frame(player = bonus_set$player,
season = bonus_set$season, round(predict(model, newdata = bonus_set, type = "probs"), digits = 8))
View(predicted_probs)
bonus_outcome_probs = predicted_probs %>%
group_by(player) %>%
mutate(num_seasons = n()) %>%
# Calculate the average probability over all of a players season for their career outcome.
summarize(Elite = sum(Elite) / num_seasons,
Allstar = sum(Allstar) / num_seasons,
Starter = sum(Starter) / num_seasons,
Rotation = sum(Rotation) / num_seasons,
Roster = sum(Roster) / num_seasons) %>%
distinct(player, .keep_all = TRUE)
View(bonus_outcome_probs)
install.packages("reactable")
library(reactable)
install.packages("reactable")
# Create the HTML table using reactable
html_table <- reactable(
data = bonus_outcome_probs,
columns = list(
player = "Player",
season = "Season",
Elite = "Elite",
Allstar = "Allstar",
Starter = "Starter",
Rotation = "Rotation",
Roster = "Roster"
),
defaultColDef = colDef(
align = "center"  # Center-align all columns
),
# You can add more customization options here
)
library(reactable)
install.packages("reactable")
library
library(reactable)
library(reactable)
library(reactable)
install.packages("htmltools")
install.packages("htmltools")
# Chunk 1: set options
# DO NOT CHANGE THE LINE BELOW
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: styling
<style>
.tocify {
max-width: 175px !important;
}
</style>
<style>
.main-container {
width: 100%;
max-width: 940px;
margin-left: 250px;
margin-right: auto;
}
</style>
<style>
.red-header {
color: red;
}
</style>
# Chunk 3: logo
htmltools::img(src = 'https://cdn.nba.com/logos/nba/1610612760/primary/L/logo.svg',
height = '250px',
alt = 'logo',
style = 'position: fixed; top: -40px; left: 5px;')
# Chunk 4: load data
library(tidyverse)
# Note, you will likely have to change these paths. If your data is in the same folder as this project,
# the paths will likely be fixed for you by deleting ../../Data/awards_project/ from each string.
awards <- read_csv("awards_data.csv")
player_data <- read_csv("player_stats.csv")
team_data <- read_csv("team_stats.csv")
rebounding_data <- read_csv("team_rebounding_data_22.csv")
# Chunk 5
# Here and for all future questions, feel free to add as many code chunks as you like. Do NOT put echo = F though, we'll want to see your code.
# Change the column names to format without spaces then create a list of the awards I need.
names(awards) = make.names(names(awards), unique=TRUE)
awards_list = c("All.NBA.First.Team", "All.NBA.Second.Team", "All.NBA.Third.Team", "all_star_game")
averages_list = c()
# For loop that goes through the desired awards and filters based on if players got that specific award.
for (award in awards_list) {
player_ids = awards %>%
filter(between(season, 2007, 2021),
(!!as.name(award)) == 1) %>%
pull(nbapersonid)
# use the player ids from previous step to filter the player data data set then calculate the points per game.
players_average_PPG = player_data %>%
filter(nbapersonid %in% player_ids) %>%
mutate(PPG = points/games) %>%
summarise(avg_PPG = mean(PPG)) %>%
pull(avg_PPG)
# add the average points per game to a vector after each loop.
averages_list = c(averages_list, players_average_PPG)
}
# create a data frame with these averages for a good visual and easier analysis.
average_PPG_df = data.frame(Awards = awards_list,
Players_Average_PPG = averages_list)
# Chunk 6
# filter out players drafted before 2007.
post_2007_ids = player_data %>%
filter(draftyear >= 2007) %>%
pull(nbapersonid)
# find the player ids and season of the first year these players earned one of the All NBA awards. I included the All NBA Defensive awards because I thought it would be a notable addition and it does not specify otherwise like the previous question.
award_selection = awards %>%
filter(nbapersonid %in% post_2007_ids,
(All.NBA.First.Team == 1 |
All.NBA.Second.Team == 1 |
All.NBA.Third.Team == 1 |
All.NBA.Defensive.First.Team == 1 |
All.NBA.Defensive.Second.Team == 1)) %>%
distinct(nbapersonid, .keep_all = TRUE) %>%
select(nbapersonid, season)
# use the player ids from the previous step to find the draft years of each of these players.
draft_years = player_data %>%
filter(nbapersonid %in% award_selection$nbapersonid) %>%
distinct(nbapersonid, .keep_all = TRUE) %>%
select(nbapersonid, player, draftyear)
# combine the two data frames then calculate the difference between a players draft year and the first year they received an award.
combined_df = merge(award_selection, draft_years) %>%
mutate(experience = season - draftyear)
# find the average years of experience of all the selected players.
years_before_award = mean(combined_df$experience)
# Chunk 7
# Create a data set that joins all the player data with their award data.
all_data = left_join(player_data, awards, by = c("nbapersonid", "season")) %>%
# add rows for the adjusted minutes and games started in the shortened 2011 and covid seasons.
mutate(PPG = points/games,
adj_mins_2011 = ifelse(season == 2011,
(mins * (82/66)),NA_real_),
adj_starts_2011 = ifelse(season == 2011,
(games_start * (82/66)), NA_real_),
adj_mins_covid = ifelse(season %in% c(2019,2020),
(mins * (82/72)), NA_real_),
adj_starts_covid = ifelse(season %in% c(2019,2020),
(games_start * (82/72)), NA_real_),
# Put a 6 in the Elite column if the player had Elite Player Status
Elite = ifelse((All.NBA.First.Team == 1 |
All.NBA.Second.Team == 1 |
All.NBA.Third.Team == 1 |
All.NBA.Defensive.First.Team == 1 |
All.NBA.Defensive.Second.Team == 1 |
Most.Valuable.Player_rk == 1 |
Defensive.Player.Of.The.Year_rk == 1), 6, 0),
# Put a 5 in the Allstar column if the player had All star player Status
Allstar = ifelse(all_star_game == TRUE, 5, 0),
# Put a 4 in the Starter column if the player had Starter player Status
Starter = ifelse((games_start >= 41 |
adj_starts_2011 >= 41 |
adj_starts_covid >= 41 |
mins >= 2000 |
adj_mins_2011 >= 2000 |
adj_mins_covid >= 2000), 4, 0),
# Put a 3 in the Rotations column if the player had Rotation player Status
Rotation = ifelse(mins >= 1000 |
adj_mins_2011 >= 1000 |
adj_mins_covid >= 1000, 3, 0),
# Put a 2 in th Roster Column if the the player had Roster player status
Roster = ifelse(mins >= 1, 2, 0)) %>%
# Count the total number of seasons each player was in
group_by(nbapersonid) %>%
distinct(season, .keep_all = TRUE) %>%
mutate(num_seasons = n())
out_names = c('Elite', 'Allstar', 'Starter', 'Rotation', 'Roster')
#add new column that contains the max value in each row
all_data$outcome = apply(all_data[out_names], 1, max, na.rm=TRUE)
all_data[is.na(all_data)] = 0
# Use only the players drafted in 2010
drafted_2010 = all_data %>%
filter(draftyear == 2010) %>%
filter(num_seasons > 5)
category_mapping <- c('2' = "Roster", '3' = "Rotation", '4' = "Starter", '5' = "Allstar", '6' = "Elite")
#create a final data set that adds up the total number of players in each bucket
final_outcomes <- drafted_2010 %>%
filter(season >= 2014) %>%
group_by(nbapersonid) %>%
count(outcome) %>%
# look at only the outcomes that the player had 2 or more years
filter(n >= 2) %>%
summarise(best_outcome = max(outcome)) %>%
ungroup() %>%
group_by(best_outcome) %>%
summarise(total = n()) %>%
mutate(best_outcome = case_when(
best_outcome %in% names(category_mapping) ~ category_mapping[as.character(best_outcome)],
TRUE ~ as.character(best_outcome)))
# Chunk 8
library(ggplot2)
library(nnet)
# Change the number value categories to the actual names of the outcomes.
category_mapping <- c('2' = "Roster", '3' = "Rotation", '4' = "Starter", '5' = "Allstar", '6' = "Elite")
all_data <- all_data %>%
mutate(outcome = case_when(
outcome %in% names(category_mapping) ~ category_mapping[as.character(outcome)],
TRUE ~ as.character(outcome)))
# Create a training set of players drafted before 2016 and a Test set of players drafted between 2018 and 2021.
train_data = all_data %>%
filter(draftyear <= 2015)
test_data = all_data %>%
filter(draftyear >= 2018 && draftyear <= 2021)
# Get rid of the scientific notation for easier analysis
options(scipen = 100, digits = 4)
# Fit a multinomial logistic regression model
model = multinom(outcome ~ PPG + mins + VORP, data = train_data)
# Summarize the model
sum = summary(model)
# Create a new data frame with predictor variables
new_data = data.frame(PPG = test_data$PPG, mins = test_data$mins, test_data$VORP)
# predict the probaility of each category for the test dataset with the model
predicted_probs = data.frame(player = test_data$player,
season = test_data$season, round(predict(model, newdata = test_data, type = "probs"), digits = 8))
# Summarize the data for the selected players in order to find the probabilty that the player has a career outcome in each category instead of just a season outcome.
pred_players = c("Shai Gilgeous-Alexander", "Zion Williamson", "James Wiseman", "Josh Giddey")
career_outcome_probs = predicted_probs %>%
filter(player %in% pred_players) %>%
group_by(player) %>%
mutate(num_seasons = n()) %>%
# Calculate the average probability over all of a players season for their career outcome.
summarize(Elite = sum(Elite) / num_seasons,
Allstar = sum(Allstar) / num_seasons,
Starter = sum(Starter) / num_seasons,
Rotation = sum(Rotation) / num_seasons,
Roster = sum(Roster) / num_seasons) %>%
distinct(player, .keep_all = TRUE) %>%
pivot_longer(cols = all_of(out_names), names_to = "Category", values_to = "Probability")
library(reactable)
bonus_set = all_data %>%
filter(draftyear >= 2019 && draftyear <= 2021)
# Create a new data frame with predictor variables
new_data = data.frame(PPG = bonus_set$PPG, mins = bonus_set$mins, bonus_set$VORP)
# predict the probaility of each category for the test dataset with the model
predicted_probs = data.frame(player = bonus_set$player,
season = bonus_set$season, round(predict(model, newdata = bonus_set, type = "probs"), digits = 8))
bonus_outcome_probs = predicted_probs %>%
group_by(player) %>%
mutate(num_seasons = n()) %>%
# Calculate the average probability over all of a players season for their career outcome.
summarize(Elite = sum(Elite) / num_seasons,
Allstar = sum(Allstar) / num_seasons,
Starter = sum(Starter) / num_seasons,
Rotation = sum(Rotation) / num_seasons,
Roster = sum(Roster) / num_seasons) %>%
distinct(player, .keep_all = TRUE)
# Create a data frame containing the predictions for players drafted in 2019-2021
bonus_outcome_probs <- bonus_outcome_probs %>%
filter(season >= 2019 && season <= 2021)
# Create a data frame containing the predictions for players drafted in 2019-2021
bonus_outcome_probs <- bonus_outcome_probs %>%
filter(season >= 2019 && season <= 2021)
```{r}
library(reactable)
bonus_set = all_data %>%
filter(draftyear >= 2019 && draftyear <= 2021)
# Create a new data frame with predictor variables
new_data = data.frame(PPG = bonus_set$PPG, mins = bonus_set$mins, bonus_set$VORP)
# predict the probaility of each category for the test dataset with the model
predicted_probs = data.frame(player = bonus_set$player,
season = bonus_set$season, round(predict(model, newdata = bonus_set, type = "probs"), digits = 8))
bonus_outcome_probs = predicted_probs %>%
group_by(player) %>%
mutate(num_seasons = n()) %>%
# Calculate the average probability over all of a players season for their career outcome.
summarize(Elite = sum(Elite) / num_seasons,
Allstar = sum(Allstar) / num_seasons,
Starter = sum(Starter) / num_seasons,
Rotation = sum(Rotation) / num_seasons,
Roster = sum(Roster) / num_seasons) %>%
distinct(player, .keep_all = TRUE)
View(bonus_outcome_probs)
# Create the HTML table using reactable
html_table <- reactable(
data = bonus_outcome_probs,
columns = list(
player = "Player",
season = "Season",
Elite = "Elite",
Allstar = "Allstar",
Starter = "Starter",
Rotation = "Rotation",
Roster = "Roster"
),
defaultColDef = colDef(
align = "center"  # Center-align all columns
),
# You can add more customization options here
)
# Create the HTML table using reactable
html_table <- reactable(
data = bonus_outcome_probs,
columns = list(
player = "player",
Elite = "Elite",
Allstar = "Allstar",
Starter = "Starter",
Rotation = "Rotation",
Roster = "Roster"
),
defaultColDef = colDef(
align = "center"  # Center-align all columns
),
# You can add more customization options here
)
# Create the HTML table using reactable with named column definitions
html_table <- reactable(
data = bonus_outcome_probs,
columns = list(
player = colDef(name = "player"),
Elite = colDef(name = "Elite"),
Allstar = colDef(name = "Allstar"),
Starter = colDef(name = "Starter"),
Rotation = colDef(name = "Rotation"),
Roster = colDef(name = "Roster")
),
defaultColDef = colDef(
align = "center"  # Center-align all columns
)
)
# Print the HTML table
html_table
View(all_data)
